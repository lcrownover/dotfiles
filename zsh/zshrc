export ZSH=$HOME/.oh-my-zsh

ZSH_THEME="robbyrussell"
GEM_HOME=/Users/lcrown/.gem
export PATH="$GEM_HOME/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="/opt/puppetlabs/bin/:$PATH"
export TERM=xterm-256color
export SUBSCRIPTION_ID="377758e9-c4a1-44d2-b701-fc556632fd3c"
export DOCKER_CONFIG=~/.docker/
export BOLT=~/.puppetlabs/bolt
ulimit -n 1024

plugins=(
	git
	zsh-syntax-highlighting
	zsh-autosuggestions
	docker
)

eval "$(rbenv init -)"

source $ZSH/oh-my-zsh.sh

if [ -d $HOME/GoogleDrive ]; then
	DRIVEDIR="GoogleDrive"
elif [ -d $HOME/Google\ Drive ]; then
	DRIVEDIR="Google\ Drive"
fi
source $HOME/$DRIVEDIR/config/iterm2/tab-color.sh

unsetopt AUTO_CD

# custom prompt
#${ret_status} <- add this to the beginning if you want ret status arrow
PROMPT='%{$fg[red]%}[%{$fg[green]%}%n%{$fg[yellow]%}@%{$fg[blue]%}%M:%{$fg[magenta]%}%1~%{$fg[red]%}] $(git_prompt_info)% %{$reset_color%}'

# bolt commands
alias boltfile='vim ~/.puppetlabs/bolt/Puppetfile'
alias cdb='cd ~/.puppetlabs/bolt'
alias bcr='bolt command run --stream --no-verbose'

# vscode
alias vs='code .'
alias code='code -n .'

# neovim
alias vim='nvim'

# openfortivpn
alias vpn='tab-color 250 100 250; sudo openfortivpn -c ~/dotfiles/openfortivpn/my-conf'

# git
alias pcm='git checkout master'
alias gs='git status'

# hostfmt
alias hostfmt='~/GoogleDrive/code/projects/hostfmt.py'

# known_hosts_quick
function known_hosts_remove() {
	if ! [[ $1 =~ "[0-9]+" ]]; then
		echo "bad input $1"
	else
		sed -i "" "$1d" /Users/lcrown/.ssh/known_hosts
	fi
}

# rexpand tool
REXPANDPATH="/Users/lcrown/GoogleDrive/code/scripts/rexpand/dist/rexpand/"
[ -d $REXPANDPATH ] && export PATH="$REXPANDPATH:$PATH" && alias rex='rexpand'


# puppet code
alias cds='cd ~/repos/systems'
alias cdnag='cd ~/puppet/is/puppet-systems/nagios/'
alias cdey='cd ~/tools/eyaml'
function git_status_all_puppet() {
	tmp=/Users/lcrown/temp/.gsapout
	cwd=$(pwd)
	cdp
	for pdir in $(ls); do
		if [ "$pdir" = "puppet-systems" ]; then
			continue
		fi
		cd $pdir
		if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
			if [ "$1" = "long" ]; then
				echo "[$(git rev-parse --abbrev-ref HEAD)] $pdir" | tee -a $tmp
				echo "$(git diff)\n\n" >> $tmp
			else
				echo "[$(git rev-parse --abbrev-ref HEAD)] $pdir"
			fi
		fi
		cd ..
	done
	cd $cwd
	[ "$1" = "long" ] && vim $tmp
	echo > $tmp

}
function git_status_all_puppet_long() {
	git_status_all_puppet long
}
function git_checkout_branch_all_puppet() {
	if [ "$1" = "" ]; then
		echo "gotta give me a branch name matching regex 'feature_.*' as \$1"
		return 1
	fi
	cwd=$(pwd); cdp
	for pdir in $(ls); do
		if [ "$pdir" = "puppet-systems" ]; then
			continue
		fi
		cd $pdir
		git checkout -b "$1"
		cdp
	done
	cd $cwd
}
function git_merge_to_master_all_puppet() {
	if [ "$1" = "" ]; then
		echo "gotta give me a branch name matching regex 'feature_.*' as \$1"
		return 1
	fi
	cwd=$(pwd); cdp
	for pdir in $(ls); do
		if [ "$pdir" = "puppet-systems" ]; then
			continue
		fi
		cd $pdir
		git checkout master
		git pull
		git merge --no-edit "$1" && git push && git push origin :$1 && git branch -d $1
		cdp
	done
	cd $cwd
}

function git_commit_all_puppet() {
	cwd=$(pwd)
	cdp
	for pdir in $(ls); do
		if [ "$pdir" = "puppet-systems" ]; then
			continue
		fi
		cd $pdir
		if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
			echo "[$(git rev-parse --abbrev-ref HEAD)] $pdir => \"$1\""
			git add --all
			git commit -m "$1"
		fi
		if [ "$2" = "push" ]; then
			[[ $(git status --branch --porcelain | grep ahead) ]] && git push origin $(git rev-parse --abbrev-ref HEAD)
		fi
		cd ..
	done
	cd $cwd
}
function git_commit_and_push_all_puppet() {
	git_commit_all_puppet $1 push
}
function pull_all_puppet() {
	cwd=$(pwd)
	cdp
	for pdir in $(ls); do
		cd $pdir
		printf "$pdir  |  branch => master\n"
		git checkout master --quiet
		git pull --quiet
		cd ..
	done
	cd $cwd
}
function cdp() {
	if [ -z $1 ]; then
		tab-color 250 173 33; cd ~/puppet/is
	else
		tab-color 250 173 33; cd ~/puppet/is/puppet_$1
	fi
}
function cdpc() { tab-color 250 173 33; cd ~/puppet/is/puppet-control-repo }
function cdps() { tab-color 250 173 33; cd ~/puppet/is/puppet-systems }
function gpa() { pull_all_puppet }
alias gprs='ssh is-puppetmaster.uoregon.edu "cd /etc/puppetlabs/fileserver-repos/puppet-systems; sudo git pull"'
alias gsa='git_status_all_puppet'
alias gsal='git_status_all_puppet_long'
alias gca='git_commit_all_puppet'
alias gcap='git_commit_and_push_all_puppet'

# puppet fileserver repos
function cdfs() {
	if [ -z $1 ]; then
		cd ~/puppet/fileserver-repos
	else
		cd ~/puppet/fileserver-repos/puppet-$1
	fi
}
# puppetserver
function puppet_node_purge() {
	for arg in $@; do
		if [[ $arg == "-y" ]]; then
			confirm=1
		fi
	done
	if [[ $confirm -ne 1 ]]; then
		echo "Purging nodes:"
		for i in $@; do echo "  $i"; done
		echo -n "Are you sure? (y/n): "
		read REPLY
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			for arg in $@; do
				ssh is-puppetmaster sudo puppet node purge $arg
			done
		fi
	fi
}

# locations and files
alias cdgd='cd ~/GoogleDrive/'
alias cdcode='cd ~/GoogleDrive/code'
alias cdprefs='cd ~/GoogleDrive/prefs'
alias cdproj='cd ~/GoogleDrive/projects'
function gps() { CWD=$(pwd); cd /Users/lcrown/repos/systems; git pull; cd $CWD }

export S='~/.servers.txt'

# workflows
function cred() { /usr/bin/env python3 ~/GoogleDrive/code/scripts/workflows/cred.py $1 | pbcopy }

# python
alias venv='source ./venv/bin/activate'

# c stuff
function cbae() {
	if [ -z $1 ]; then
		echo "pass file.c as only argument"
	else
		n=$(echo $1 | awk -F"." '{print $1}')
		gcc $n.c -o $n && ./$n
		rm -f $n
	fi
}

# go stuff
alias goinit='mkdir -p bin pkg src/github.com/lcrownover'
alias gopath='export GOPATH="$(pwd)" && echo GOPATH=$(pwd); export PATH=$GOPATH/bin:$PATH'

# vim
function vip() { cdp; vim }
function vin() { cdnag; vim }
function vnotes() {
	cd ~/GoogleDrive/notes
	tab-color 255 0 255
	vim
}

# vscode
function vp() {
	CWD=$(pwd)
	cdp
	code .
	cd $CWD
	tab-reset
	exit
}
function vn() {
	CWD=$(pwd)
	cdnag
	code .
	cd $CWD
}
function notes() {
	CWD=$(pwd)
	cd ~/GoogleDrive/notes
	code .
	exit
}

function bs() {
	case "$1" in
	t*)
		vim ~/.bolt-targets.txt
		;;
	e*)
		vim ~/.bolt-script.sh
		;;
	r*)
		bolt script run ~/.bolt-script.sh --targets @~/.bolt-targets.txt --transport pcp
		;;
	*)
		echo "usage:  bs (e|t|r)"
		echo "	e : edit script"
		echo "	t : edit targets"
		echo "	r : run script against targets"
		;;
	esac
}

function mssh() {
	if [[ $1 == "s" ]]; then
		vim /Users/lcrown/.servers.txt
	elif [[ $1 == "c" ]]; then
		vim /Users/lcrown/.command.txt
	elif [[ $1 == "block" ]]; then
		multissh --command @~/.command.txt --nodes @~/.servers.txt --block
	elif [[ $1 == "match" ]]; then
		multissh --command @~/.command.txt --nodes @~/.servers.txt --match_width
	elif [[ $1 == "d" ]]; then
		multissh /Users/lcrown/multissh/multissh.rb --command @~/.command.txt --nodes  @~/.servers.txt --debug
	elif [[ $1 == "l" ]]; then
		multissh --command @~/.command.txt --nodes  @$2
	elif [[ $# -eq 2 ]]; then
		multissh --command $2 --nodes $1
	else
		multissh --command @~/.command.txt --nodes  @~/.servers.txt
	fi
}

function mping() {
	for host in $(cat /Users/lcrown/.servers.txt); do
    		ping -c2 "$host" &>/dev/null && printf "success -- " || printf "fail -- "
		echo "$host"
	done
}

function vcgn() {
	python2 /Users/lcrown/repos/systems/vmware/get_network_adapters_for_host.py -s 'vcenter-2' -u 'lcrown' -v $1 -p $(grep lcrown ~/.credentials | cut -d':' -f2)
}

function mvcgn() {
	for host in $(cat /Users/lcrown/.servers.txt); do
		vcgn $host
	done
}

function check_host_alive() {
	python2 /Users/lcrown/repos/systems/vmware/check_host_alive.py -s 'vcenter-2' -u lcrown -l ~/.servers.txt
}
function validate_host_list() {
	pwsh /Users/lcrown/repos/systems/vmware/powershell/CheckHostExistence.ps1 -Filepath '~/.servers.txt' -Username lcrown
}
function validate_host() {
	pwsh /Users/lcrown/repos/systems/vmware/powershell/CheckHostExistence.ps1 -Computername $1 -Username lcrown
}

function run_vmware_puppet() {
	python2 /Users/lcrown/repos/systems/vmware/run_command_on_guest.py -s 'vcenter-2' -u lcrown -v $1 -c '/bin/puppet' -a 'agent --test' -x True
}

function run_vmware_rebuild_iptables() {
	python2 /Users/lcrown/repos/systems/vmware/run_command_on_guest.py -s 'vcenter-2' -u lcrown -v $1 -c '/usr/local/sbin/rebuild-iptables' -a '' -x True
}

function noop() {
	if [[ $2 == "s" ]]; then
		bolt command run "bash -c /usr/local/sbin/puppet_noop_${1}.sh" --targets
	else
		bolt command run "bash -c /usr/local/sbin/puppet_noop_${1}.sh" --targets $2
	fi
}

#function pat() {
	#if [[ $1 == "s" ]]; then
		#if [[ $2 == "block" ]]; then
			#multissh --command "puppet agent --test" --nodes @~/.servers.txt --block
		#else
			#multissh --command "puppet agent --test" --nodes @~/.servers.txt
		#fi
	#elif [[ $1 == "puppet" ]]; then
		#multissh --command "puppet agent --test" --nodes is-puppet1,is-puppet2,is-puppet3,is-puppetca1
	#elif [[ $1 == "scrooge" ]]; then
		#multissh --command "puppet agent --test" --nodes 'scrooge1,scrooge2,scrooge3,scrooge4'
	#elif [[ $1 == "loire" ]]; then
		#multissh --command "puppet agent --test" --nodes 'is-loire1,is-loire2'
	#elif [[ $1 == "donald" ]]; then
		#multissh --command "puppet agent --test" --nodes 'donald1,donald2'
	#elif [[ $1 == "daisy" ]]; then
		#multissh --command "puppet agent --test" --nodes 'daisy1,daisy2,daisy3,daisy4'
	#else
		#multissh --command "puppet agent --test" --nodes $1
	#fi
#}

function pat() {
	c="puppet agent --test"
	[[ ! -z $2 ]] && c+=" --environment $2"
	bolt command run $c --targets $1 --stream --no-verbose
}

function pyclean () {
        find . -type f -name "*.py[co]" -delete
        find . -type d -name "__pycache__" -delete
}

function vvssh(){
	title $1
	ssh $1 -t 'screen -h 2000 -dRR -S lcrown'
        #ssh $1 -t 'tmux attach-session -t lcrown || tmux new -s lcrown'
#	ssh $1 -t 'tmux send-keys -t lcrown "set -g mouse on && tmux set -g status off" Enter'
}

function pushdns(){
	bolt command run --targets is-nsdb1 "puppet agent --test"
	bolt command run --targets phloem "puppet agent --test"
}

function rpw(){
	SYS_REPO=$HOME/repos/systems
	CREDF=$HOME/.credentials.yaml
	HOSTNAME=$1
	GROUP=$2
	if [ "$GROUP" = "ids" ]; then
		KEY=$(grep ids_seed: $CREDF | awk -F"\'" '{print $2}')
	else
		KEY=$(grep sys_seed: $CREDF | awk -F"\'" '{print $2}')
	fi
	ruby $SYS_REPO/root_password/generator/root_password_generator.rb --hostname $HOSTNAME --key $KEY | tail -n 1 | tr -d '\n'
}

function rcode(){
	if [ "$#" = 1 ]; then
		RHOST=$(echo $1 | cut -d':' -f1)
		RPATH=$(echo $1 | cut -d':' -f2)
	elif [ "$#" = 2 ]; then
		RHOST=$1
		RPATH=$2
	else
		echo "usage:  rcode HOSTNAME PATH"
		return 1
	fi
	REMOTEPASS=$(rpw $RHOST)
	RDIR=$(echo $RPATH | sed 's/\//\_/g')
	LOCALMNTDIR="/Users/$(whoami)/mnt/$RHOST---$RDIR"
	mkdir -p $LOCALMNTDIR
	umount $LOCALMNTDIR 2>/dev/null
	sshfs -o ServerAliveInterval=15,ServerAliveCountMax=3,password_stdin root@$RHOST:$RPATH $LOCALMNTDIR <<< $REMOTEPASS
	code $LOCALMNTDIR
	# umount -l $LOCALMNTDIR
}
alias urcode="df -h | grep root@ | awk '{print \$NF}' | xargs umount"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export PATH="/usr/local/opt/python/libexec/bin:$PATH"
export PATH="/usr/local/opt/python2/libexec/bin:$PATH"

# Set azure environment variables
AZPREFS="~/.azure/terraform.sh"
if [ -f $AZPREFS ]; then
	source $AZPREFS
fi

# Start tmux
#if which tmux 2>&1 >/dev/null; then
#	tmux ls | grep -v attached | cut -d':' -f1 | grep -E '[0-9]+' | xargs -n1 tmux kill-session -t
#	if [ -z $TMUX ]; then
#		tmux new
#	fi
#fi
#
