---
- name: configure nvim
  hosts: localhost
  gather_facts: false

  vars:
    nvim_src_dir: '{{ ansible_env.HOME }}/repos/neovim'

  tasks:

    - name: Set langugage_servers fact
      set_fact:
        language_servers:
          - lua-language-server
          - go-debug-adapter
          - angular-language-server
          - ansible-language-server
          - awk-language-server
          - bash-language-server
          - black
          - delve
          - dockerfile-language-server
          - eslint_d
          - gopls
          - luacheck
          - luaformatter
          - markdownlint
          - puppet-editor-services
          - pylint
          - pyright
          - rust-analyzer
          - shfmt
          - solargraph
          - terraform-ls
          - typescript-language-server
          - vim-language-server


    - name: Ubuntu => install neovim build dependencies
      when: ansible_distribution == 'Ubuntu'
      become: true
      ansible.builtin.apt:
        pkg:
          - 'ninja-build'
          - 'gettext'
          - 'libtool'
          - 'libtool-bin'
          - 'autoconf'
          - 'automake'
          - 'cmake'
          - 'g++'
          - 'pkg-config'
          - 'unzip'
          - 'curl'
          - 'doxygen'
          - 'ripgrep'
          - 'black'

    - name: RedHat => install neovim build dependencies
      when: ansible_distribution == 'RedHat'
      become: true
      package:
        state: latest
        name:
          - ninja-build
          - libtool
          - autoconf
          - automake
          - cmake
          - gcc
          - gcc-c++
          - make
          - pkgconfig
          - unzip
          - patch
          - gettext
          - curl

    - name: Linux => clone neovim
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'RedHat'
      ansible.builtin.git:
        repo: https://github.com/neovim/neovim
        dest: '{{ nvim_src_dir }}'
        clone: true
        update: false

    - name: Linux => make neovim
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'RedHat'
      ansible.builtin.command:
        cmd: '/usr/bin/env make CMAKE_BUILD_TYPE=RelWithDebInfo'
        chdir: '{{ nvim_src_dir }}'
        creates: '{{ nvim_src_dir }}/build'

    - name: Linux => install neovim
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'RedHat'
      become: true
      ansible.builtin.command:
        cmd: 'make install'
        chdir: '{{ nvim_src_dir }}'
        creates: '/usr/local/bin/nvim'

    - name: Linux => link nvim
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'RedHat'
      become: true
      ansible.builtin.file:
        src: '/usr/local/bin/nvim'
        dest: '/usr/bin/nvim'
        state: link
        force: true

    - name: macOS => install neovim
      when: ansible_distribution == 'MacOSX'
      community.general.homebrew:
        name: neovim
        state: HEAD

    - name: create nvim configdir
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.config/nvim'
        state: directory

    - name: remove .vimrc
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.vimrc'
        state: absent
        force: true

    - name: remove init.vim
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.config/nvim/init.vim'
        state: absent
        force: true

    - name: link init.lua
      ansible.builtin.file:
        src: '{{ ansible_env.PWD }}/../../nvim/init.lua'
        dest: '{{ ansible_env.HOME }}/.config/nvim/init.lua'
        state: link
        force: true

    - name: link lua
      ansible.builtin.file:
        src: '{{ ansible_env.PWD }}/../../nvim/lua'
        dest: '{{ ansible_env.HOME }}/.config/nvim/lua'
        state: link
        force: true

    - name: install packer
      ansible.builtin.git:
        repo:  https://github.com/wbthomason/packer.nvim
        dest: '{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/packer.nvim'
        clone: true
        update: true
        depth: 1

    - name: install nvim plugins
      ansible.builtin.command:
        cmd: "nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'"
        creates: '{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/plenary.nvim'

    - name: install language servers with Mason
      ansible.builtin.command:
        cmd: "nvim --headless -c 'MasonInstall {{language_servers | join(' ')}} | true"
        creates: '{{ ansible_env.HOME }}/.local/share/nvim/mason/bin'
